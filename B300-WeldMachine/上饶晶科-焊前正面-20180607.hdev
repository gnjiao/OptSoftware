<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<l>ImagePath:='D:/A01 文件备份/ImageA区/2018年06月04日 白班/定位'</l>
<l>ResultPath:=ImagePath+'/ResultWJ/'</l>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 03" as_grp="[1,2]" as_ord="1">list_files (ImagePath+'/WJ', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 03" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(bmp|jpg)$','ignore_case'], ImageFiles)</l>
<l>dev_close_window ()</l>
<l>read_image (Image, ImageFiles[0])</l>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<c>*新建窗口</c>
<l>dev_open_window (0, 0, Width*0.5, Height*0.5, 'black', WindowID)</l>
<l>dev_resize_window_fit_image (Image, 0, 0, -1, -1)</l>
<c>*设置字体大小</c>
<l>set_display_font (WindowID, 24, 'mono', 'true', 'false')</l>
<c></c>
<l>dev_display (Image)</l>
<c>*设置区域显示模式（轮廓）</c>
<l>dev_set_draw ('margin')</l>
<c>*建立模板之前先做图像角度矫正</c>
<l>Star_AffineTransImage (Image, ImageGauss1_AffinTrans, Height, Width)</l>
<l>dev_display (ImageGauss1_AffinTrans)</l>
<c>*模板位置 06</c>
<l>* draw_rectangle2 (WindowID, Row, Column, Phi, Length1, Length2)</l>
<c></c>
<l>gen_rectangle2 (Rectangle, 608, 1285, 0, 580, 402)</l>
<l>reduce_domain (ImageGauss1_AffinTrans, Rectangle, ImageReduced)</l>
<l>crop_domain (ImageReduced, ImagePart)</l>
<l>zoom_image_factor (ImagePart, ImageZoomed, 0.5, 0.5, 'constant')</l>
<c>*建立模板</c>
<l>pi := acos(0.0) * 2</l>
<l>create_template_rot (ImageZoomed, 4, -pi, 2 * pi, pi / 45, 'sort', 'original', TemplateID)</l>
<c>*NG数量统计</c>
<l>error:=0</l>
<l>for Index := 0 to |ImageFiles| - 1 by 1   </l>
<l>    read_image (Image, ImageFiles[Index])</l>
<c>    * Do something</c>
<l>    parse_filename(ImageFiles[Index],afileBaseName,afileExt,afileDir)  </l>
<l>    dev_set_color ('red') </l>
<l>    dev_set_line_width (2)</l>
<c>    </c>
<l>    get_image_size (Image, Width, Height)</l>
<l>    count_seconds (S1)</l>
<l>    Star_AffineTransImage (Image, Image_AffinTrans, Height, Width)</l>
<c>    ********************************************************</c>
<l>    Positive_weld_before_check (Image_AffinTrans, ResultObjectOK, ResultObjectNG, ObjectR,\
                                TemplateID)</l>
<l>    count_seconds (S2)   </l>
<l>    Weld_result_show (Image_AffinTrans, ResultObjectOK, ResultObjectNG, ObjectR)</l>
<c>    ********************************************************</c>
<l>    count_obj (ResultObjectOK, NumOK)</l>
<l>    count_obj (ResultObjectNG, NumNG)</l>
<l>    S:=S2-S1 </l>
<l>    Msg:=[]</l>
<l>    Msg[0]:='图像序号为:'+Index</l>
<l>    Msg[1]:='图像名字为:'+afileBaseName  </l>
<l>    Msg[2]:='程序处理时间：:'+1000.0*S+' ms'</l>
<l>    disp_message (3600, Msg, 'image', 25, 25, 'green','false')</l>
<l>    if (NumNG&gt;0)       </l>
<l>        dump_window (3600, 'bmp', ResultPath+'/NG/'+afileBaseName) </l>
<l>    else</l>
<l>        dump_window (3600, 'bmp', ResultPath+'/OK/'+afileBaseName)   </l>
<l>    endif </l>
<l>*     stop ()</l>
<l>endfor</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="str_Welding_recognition">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="Image_AffinTrans" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="out_EO_error_region" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="row_2" base_type="ctrl" dimension="0"/>
<par name="column_2" base_type="ctrl" dimension="0"/>
<par name="WindowID" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="out_temp_error" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>            *NG区域记录</c>
<l>    gen_empty_obj (out_EO_error_region)</l>
<c></c>
<l>* dev_display (Image_AffinTrans)</l>
<c>        *1：翘起的数量</c>
<c>        *最大允许长度</c>
<l>        h_ERROR_Number:=0</l>
<c>        *数量</c>
<l>        h_erNumber:=0</l>
<l>        gen_empty_obj(EmptyObject_her)</l>
<c>        </c>
<c>        *2：穿孔附近链接的严重翘起</c>
<l>        h_erNumberX:=0</l>
<l>        gen_empty_obj(EmptyObject_herX)</l>
<c>        </c>
<c>        *3：无包裹为NG</c>
<l>        dw_erNumber:=0</l>
<l>        gen_empty_obj(Rectangle1)</l>
<c>       </c>
<c>        *4：包裹不完整，上、左右、却2边</c>
<l>        LR_erNumberX:=0</l>
<l>        gen_empty_obj(LR_SRegionsX)</l>
<c>       </c>
<c>        *5：判断焊锡包裹密度</c>
<l>        area_erNumber:=0</l>
<l>        gen_empty_obj(area_erSRegions)</l>
<c>                </c>
<c>        </c>
<c>        *</c>
<l>        out_temp_error := 0</l>
<c>        </c>
<c>        *起始位置R</c>
<l>        Q_row:=347</l>
<c>        *起始位置W</c>
<l>        Q_column:=-504</l>
<c>        *每个焊接位置的间距</c>
<l>        Q_HJ_spacing:=383</l>
<c>        *每次偏移位置累加</c>
<l>        Q_PY_temp_spacing:=Q_column+0</l>
<l>*         gen_empty_obj (EmptyObject_Classes)</l>
<l>*         dev_display (Image)</l>
<l>*         dev_display (Image_AffinTrans)</l>
<l>        for Index2 := 0 to 3 by 1</l>
<c>            *</c>
<l>            gen_rectangle2 (Rectangle1, row_2+(Q_row), column_2+(Q_PY_temp_spacing), 0, 91, 75)</l>
<c></c>
<c>            *测试位置</c>
<l>*             Q_PY_temp_spacing:=Q_PY_temp_spacing+Q_HJ_spacing</l>
<c>            </c>
<l>            stop ()</l>
<c>            </c>
<l>            reduce_domain (Image_AffinTrans, Rectangle1, ImageReduced1)</l>
<c>            *</c>
<l>            smallest_rectangle1 (Rectangle1, Row1, Column1, Row2, Column2)</l>
<l>            h_row:=Row2-Row1</l>
<l>*             h_column:=Column2-Column1</l>
<l>            cr_w:=Column2-Column1</l>
<c>            *</c>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            gen_rectangle1 (Rectangle7_t, Row1, Column1+(cr_w*0.03), Row2+Row2*0.01, Column2-(cr_w*0.03))</l>
<l>            reduce_domain (Image_AffinTrans, Rectangle7_t, ImageReduced_t)</l>
<l>*             dev_display (Image)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            mean_image (ImageReduced_t, ImageMean, 1, 30)</l>
<l>            mean_image (ImageMean, ImageMean1, 13, 1)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            dyn_threshold (ImageMean, ImageMean1, RegionDynThresh, 12, 'dark')</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            dilation_rectangle1 (RegionDynThresh, RegionDilation, 1, 15)</l>
<l>            closing_circle (RegionDilation, RegionClosing1, 2.5)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            erosion_rectangle1 (RegionClosing1, RegionErosion, 1, 15)</l>
<c>            *</c>
<c>            *超过设定长度，汇流条有翘起</c>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            connection (RegionErosion, ConnectedRegions)</l>
<c>            </c>
<c>            *最大允许长度</c>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            select_shape (ConnectedRegions, h_ER_sRegions, 'height', 'and', h_row*0.7, 99999)</l>
<c>            *判断2条特征线的距离宽度</c>
<l>            count_obj (h_ER_sRegions, h_ERROR_Number)</l>
<c>            </c>
<c>            </c>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            select_shape (ConnectedRegions, h_sRegions, 'height', 'and', h_row*0.4, 99999)</l>
<c>            *判断2条特征线的距离宽度</c>
<l>            count_obj (h_sRegions, tempNumber)</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<c>            *汇流条宽度</c>
<l>            Electrode_L:=cr_w*0.363</l>
<c>            *判断2个区域的间距</c>
<l>            LherX:=cr_w*0.5</l>
<c>            *缺陷区域</c>
<l>*             gen_empty_obj (EmptyObject_her)</l>
<l>            if (tempNumber&gt;1)</l>
<c>                </c>
<l>                smallest_rectangle1 (h_sRegions, Row1_temp, Column1_temp, Row2_temp, Column2_temp)</l>
<l>                temp_L:=Row2_temp-Row1_temp</l>
<c>                *删选最长的2个</c>
<l>                gen_empty_obj (EmptyObject_l)</l>
<l>                for Index_temp := 1 to 2 by 1</l>
<l>                    try</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>                        tuple_max (temp_L, TEMP_Lmax)</l>
<c>                        *获取最大值的位置</c>
<l>                        tuple_find (temp_L, TEMP_Lmax, Indices)</l>
<c>                        *删除索引位置的值</c>
<l>                        tuple_remove (temp_L, Indices, temp_L)</l>
<c>                        *</c>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>                        select_shape (h_sRegions, SelectedRegions, 'height', 'and', TEMP_Lmax, 9999)</l>
<l>                        union2 (EmptyObject_l, SelectedRegions, EmptyObject_l)</l>
<l>                    catch (Exception)</l>
<c>                        *2个一样长时可能报错，不用处理</c>
<l>                    endtry</l>
<c>                    </c>
<l>                endfor</l>
<c>                </c>
<c>                *</c>
<l>                union1 (EmptyObject_l, RegionUnion1)</l>
<l>                connection (RegionUnion1, ConnectedRegions1)</l>
<l>                select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', 1, 99999999)</l>
<l>                count_obj (SelectedRegions1, Number)</l>
<c>                *</c>
<l>*                 if (Number&gt;1)</l>
<l>*                     sort_region (SelectedRegions1, SortedRegions, 'first_point', 'true', 'column')</l>
<l>*                     smallest_rectangle2 (SortedRegions, Row, Column, Phi2, Length12, Length22)</l>
<l>*                     dev_display (ImageGauss1)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>*                     gen_rectangle2 (Rectangle, Row[0], Column[0], Phi2[0], Length12[0], Length22[0])</l>
<l>*                     gen_rectangle2 (Rectangle6, Row[1], Column[1], Phi2[1], Length12[1], Length22[1])</l>
<l>*                     gen_region_line (RegionLines, Row[0], Column[0], Row[1], Column[1])</l>
<c>                    </c>
<l>*                 endif</l>
<c>                </c>
<c>                </c>
<l>        dev_display (Image_AffinTrans)</l>
<l>                closing_rectangle1 (RegionUnion1, RegionClosing_er, cr_w*0.5, 1)</l>
<c>                *获取中间部分区域计算</c>
<l>                smallest_rectangle1 (RegionClosing_er, Row18, Column18, Row28, Column28)</l>
<l>                smallest_rectangle2 (RegionClosing_er, Row7, Column7, Phi, Length1, Length2)</l>
<l>                dev_display (Image)</l>
<l>        dev_display (Image_AffinTrans)</l>
<l>                gen_rectangle2 (Rectangle3, Row7, Column7, rad(90), 0.1, (Column28-Column18)/2)</l>
<l>                smallest_rectangle2 (Rectangle3, Row8, Column8, Phi1, Length11, Length21)</l>
<l>*                 smallest_rectangle1 (RegionClosing2, Row12, Column12, Row22, Column22)</l>
<l>                w_lenght:=Length11*2</l>
<l>                if (w_lenght&gt;Electrode_L and w_lenght&lt;LherX)</l>
<l>                    h_erNumber:=2</l>
<l>                    copy_obj (RegionClosing_er, EmptyObject_her, 1, 1)</l>
<l>                else</l>
<l>                    h_erNumber:=1</l>
<c>                </c>
<l>                endif</l>
<l>            else</l>
<l>                h_erNumber:=tempNumber</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<c>            </c>
<c>            *链接穿孔处有超过设定长度，认为是较严重汇流条翘起</c>
<l>*             dev_display (Image)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            smallest_rectangle1 (Rectangle1, Row11, Column11, Row21, Column21)</l>
<l>            gen_rectangle1 (Rectangle2, Row21-20, Column11, Row21, Column21)</l>
<c>            *</c>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            dilation_rectangle1 (RegionErosion, RegionDilation1, 1, 11)</l>
<c>            *</c>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            union2 (RegionDilation1, Rectangle2, RegionUnion)</l>
<l>            connection (RegionUnion, ConnectedRegions3)</l>
<l>            area_center (ConnectedRegions3, Area2, Row5, Column5)</l>
<l>            tuple_max (Area2, Max2)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            select_shape (ConnectedRegions3, SelectedRegions2, 'area', 'and', Max2, 99999999)</l>
<c>            *获取穿孔处特征</c>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            intersection (SelectedRegions2, RegionClosing1, RegionDifference2)</l>
<l>            connection (RegionDifference2, ConnectedRegions4)</l>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            select_shape (ConnectedRegions4, EmptyObject_her2, 'height', 'and', h_row*0.35, 99999999)</l>
<l>            count_obj (EmptyObject_her2, h_erNumber2)</l>
<c>            </c>
<c>            *判断2个区域的宽度</c>
<l>            union1 (EmptyObject_her2, RegionUnion13)</l>
<l>            smallest_rectangle1 (RegionUnion13, Row14, Column14, Row24, Column24)</l>
<l>            w_column:=Column24-Column14</l>
<c>            *有短的情况下，要有长的才可以判定为NG EmptyObject_herX</c>
<l>            h_erNumberX:=0</l>
<c>            *参数1：2个区域</c>
<c>            *参数2：大于汇流条设定宽度</c>
<c>            *参数3：接近汇流条设定宽度</c>
<l>            if (h_erNumber2&gt;1 and w_column&gt;Electrode_L and w_column&lt;LherX)</l>
<l>                smallest_rectangle1 (EmptyObject_her2, Row16, Column16, Row26, Column26)</l>
<l>                temo_h:=Row26-Row16</l>
<l>                tuple_min (temo_h, h_Min)</l>
<c>                *判断最长的长度</c>
<l>                hmin_row:=h_Min*1.35</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>                select_shape (EmptyObject_her2, herX_region, 'height', 'and', hmin_row, 99999999)</l>
<l>                count_obj (herX_region, temper_herX)</l>
<l>                if (temper_herX&gt;0)</l>
<l>                    union1 (EmptyObject_her2, RegionUnion12)</l>
<l>                    copy_obj (RegionUnion12, EmptyObject_herX, 1, 1)</l>
<l>                    h_erNumberX:=1</l>
<l>                endif</l>
<l>            else</l>
<l>                h_erNumberX:=0</l>
<l>            endif</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<l>            h_ERROR_Number2:=0</l>
<l>            gen_empty_obj (h_ERROR_SRegions2)</l>
<l>            if (h_ERROR_Number&gt;0 or h_erNumber&gt;0 or h_erNumber2&gt;0)</l>
<c>                </c>
<c>                *计算90°∟直角特征</c>
<l>*                 dev_display (Image)</l>
<l>*         dev_display (Image_AffinTrans)</l>
<l>                union2 (h_ER_sRegions, EmptyObject_her2, RegionUnion4)</l>
<l>                union2 (h_sRegions, RegionUnion4, RegionUnion6)</l>
<l>                union1 (RegionUnion6, RegionUnion7)</l>
<l>                smallest_rectangle1 (RegionUnion7, Row13, Column13, Row23, Column23)</l>
<l>                gen_rectangle2 (Rectangle8, Row13, Column13, 0, 500, 23)</l>
<l>*         dev_display (Image_AffinTrans)</l>
<l>                intersection (Rectangle8, Rectangle1, RegionDifference4)</l>
<l>                erosion_rectangle1 (RegionDifference4, RegionErosion3, 29, 1)</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>*                 move_region (RegionDifference4, RegionMoved, -(25/2), 0)</l>
<l>        reduce_domain (Image_AffinTrans, RegionErosion3, ImageReduced)</l>
<l>*         dev_display (Image_AffinTrans)</l>
<l>                mean_image (ImageReduced, ImageMean5, 30, 1)</l>
<l>                mean_image (ImageMean5, ImageMean6, 1, 13)</l>
<l>                dyn_threshold (ImageMean5, ImageMean6, RegionDynThresh2, 12, 'dark')</l>
<l>        closing_circle (RegionDynThresh2, RegionClosing4, 1.5)</l>
<l>        connection (RegionClosing4, ConnectedRegions8)</l>
<c></c>
<l>*                 dev_display (Image_AffinTrans)</l>
<c>                *判断90°∟直角特征的位置，</c>
<c>                *如果靠下面则判断长度超过40%（默认）</c>
<l>                gen_rectangle1 (Rectangle4, Row2-((Row2-Row1)*0.60), Column1, Row2, Column2)</l>
<l>                smallest_rectangle1 (Rectangle4, Row17, Column17, Row27, Column27)</l>
<c>                *</c>
<l>                ocrw:=cr_w*0.27</l>
<l>                select_shape (ConnectedRegions8, SelectedRegions3, \
                              ['row','width'], 'and', [Row17,ocrw], [Row27,99999])</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>                dilation_rectangle1 (SelectedRegions3, RegionDilation2, 15, 1)</l>
<l>                dilation_rectangle1 (RegionUnion6, RegionDilation3, 1, 15)       </l>
<l>*         dev_display (Image_AffinTrans)</l>
<l>                union2 (RegionDilation2, RegionDilation3, RegionUnion5)</l>
<l>                closing_rectangle1 (RegionUnion5, RegionClosing7, 3, 1)</l>
<l>                connection (RegionClosing7, ConnectedRegions7)</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<c>                *</c>
<l>                hrow_e:=h_row*0.35</l>
<l>                select_shape (ConnectedRegions7, h_ERROR_SRegions2, \
                              ['width','height'], 'and', [ocrw,hrow_e], [9999,9999])</l>
<l>                count_obj (h_ERROR_SRegions2, h_ERROR_Number2)</l>
<l>         *       h_ERROR_Number2:=0</l>
<c>                </c>
<l>            else</l>
<l>                h_ERROR_Number2:=0</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>*             mean_image (ImageReduced1, ImageMean3, 3, 3)</l>
<l>*             mean_image (ImageMean3, ImageMean4, 35, 1)</l>
<l>*             dyn_threshold (ImageMean3, ImageMean4, RegionDynThresh3, 15, 'light')</l>
<c>            </c>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<c>            </c>
<c>            </c>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            mean_image (ImageReduced1, ImageMean2, 5, 5)</l>
<l>            invert_image (ImageMean2, ImageInvert)</l>
<l>            intensity (Rectangle1, ImageInvert, Mean, Deviation)</l>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>*             threshold (ImageInvert, Region, 200, 255)</l>
<l>            m_threshold:=Mean-Deviation</l>
<l>            dyn_threshold (ImageMean2, ImageInvert, RegionDynThresh1, m_threshold, 'dark')</l>
<l>            closing_circle (RegionDynThresh1, RegionClosing, 3.5)</l>
<c>            </c>
<c>            </c>
<c>            *拟合下面的区域 Row11, Column11, Row21, Column21</c>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            gen_rectangle1 (Rectangle7, Row11-7, Column11, Row21, Column21)</l>
<l>            intersection (Rectangle7, RegionClosing, RegionIntersection1)</l>
<l>            closing_rectangle1 (RegionIntersection1, RegionClosing3_w, cr_w*0.1, 1)</l>
<l>            union2 (RegionClosing, RegionClosing3_w, RegionUnion3_w)</l>
<c>            </c>
<c>            </c>
<c>            *</c>
<c>            *获取分析区域，面积10%</c>
<l>            area_center (Rectangle1, Area4, Row9, Column9)</l>
<l>            r1areaa:=Area4*0.06</l>
<c>            *检查包裹度</c>
<l>            connection (RegionUnion3_w, ConnectedRegions5)</l>
<l>*             area_center (ConnectedRegions5, Area3, Row6, Column6)</l>
<l>*             dev_display (Image)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            select_shape (ConnectedRegions5, dw_SRegions, \
                          ['area','height'], 'and', [r1areaa, 50], [999999999,9999])</l>
<l>            count_obj (dw_SRegions, dw_erNumber)</l>
<c>            </c>
<c>            </c>
<c>            *判断宽度包裹宽度</c>
<l>            if (dw_erNumber&gt;0)</l>
<l>*                 dev_display (Image)</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>*                 gen_rectangle1 (Rectangle_1up, Row11, Column11, Row11+h_row*0.4, Column21)</l>
<l>                gen_rectangle1 (Rectangle_left, Row21-80, Column11, Row21, Column11+cr_w*0.225)</l>
<l>                gen_rectangle1 (Rectangle_right, Row21-80, Column21-cr_w*0.225, Row21, Column21)</l>
<l>                union2 (Rectangle_left, Rectangle_right, RegionUnion2)</l>
<c>                </c>
<c>                *上区域</c>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>*                 area_center (Rectangle_1up, Area_1up, Row_1up, Column_1up)</l>
<l>*                 intersection (Rectangle_1up, dw_SRegions, RegionIntersection3)</l>
<l>*                 connection (RegionIntersection3, ConnectedRegions10)</l>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>*                 r1areaa2:=Area_1up*0.1</l>
<l>*                 select_shape (ConnectedRegions10, up_SRegions2, \
                          ['area','height'], 'and', [r1areaa2, h_row*0.4*0.5], [999999999,9999])</l>
<l>*                 count_obj (up_SRegions2, up_erNumber1)</l>
<c>                </c>
<c>                *</c>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>                intersection (RegionUnion2, dw_SRegions, RegionDifference3)</l>
<l>                closing_rectangle1 (RegionDifference3, RegionClosing3, 1, h_row*0.21)</l>
<l>                fill_up (RegionClosing3, RegionFillUp2)</l>
<l>                connection (RegionFillUp2, ConnectedRegions6)</l>
<c>                </c>
<c>                *左右单个方块的面积</c>
<l>*                 dev_display (Image_AffinTrans)</l>
<l>                area_center (Rectangle_left, Area, Row3, Column3)</l>
<l>                lr_erArea:=Area*0.2</l>
<c>                *</c>
<l>                select_shape (ConnectedRegions6, lr_SRegions2, \
                              ['area','height'], 'and', [lr_erArea, h_row*0.2], [999999999,9999])</l>
<l>                count_obj (lr_SRegions2, lr_erNumber2)</l>
<c>                </c>
<c>                *</c>
<l>                LR_erNumberX:=0</l>
<l>                if (lr_erNumber2&lt;2)</l>
<l>                    LR_erNumberX:=1</l>
<l>                    union2 (Rectangle1, lr_SRegions2, LR_SRegionsX)</l>
<c>                    </c>
<l>                endif</l>
<c>                    *</c>
<l>*                 if ((up_erNumber1+lr_erNumber2)&lt;2)</l>
<l>*                     LR_erNumberX:=1</l>
<l>*                     union2 (up_SRegions2, lr_SRegions2, LR_SRegionsX)</l>
<c>                    </c>
<l>*                 else</l>
<c>                    *</c>
<l>*                 endif</l>
<c>                    </c>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<c>*             h_row,cr_w</c>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            gen_rectangle1 (Rectangle9, Row11, Column11, Row11+29, Column21)</l>
<c>            *检查焊锡包裹密度</c>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            union2 (RegionClosing, Rectangle9, RegionUnion11)</l>
<c>            </c>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            fill_up (RegionUnion11, RegionFillUp1)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            difference (RegionFillUp1, Rectangle9, RegionDifference5)</l>
<c>            </c>
<l>            _w:=cr_w*0.3</l>
<l>            _h:=h_row*0.6</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            erosion_rectangle1 (Rectangle1, RegionErosion4, _w, _h)</l>
<c>            *获取中心部分未包裹区域，用于判断</c>
<l>*             dev_display (Image)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            difference (RegionErosion4, RegionClosing, RegionDifference)</l>
<c>            </c>
<c>            </c>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            difference (RegionDifference5, RegionClosing, RegionIntersection)</l>
<c>            </c>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            union2 (RegionDifference, RegionIntersection, RegionUnion3)</l>
<c>            </c>
<c>            </c>
<l>*             dev_display (Image)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>            closing_circle (RegionUnion3, RegionClosing5, 1.5)</l>
<l>            fill_up (RegionClosing5, RegionFillUp3)</l>
<c>            *</c>
<l>            connection (RegionFillUp3, ConnectedRegions2)</l>
<l>            area_center (ConnectedRegions2, Area1, Row4, Column4)</l>
<l>            tuple_max (Area1, Max1)</l>
<l>*             dev_display (Image)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<l>*     M_area:=Area4*0.13</l>
<l>            select_shape (ConnectedRegions2, area_erSRegions, 'area', 'and', Max1*0.3, 999999)</l>
<l>            count_obj (area_erSRegions, areaNumber1)</l>
<l>            union1 (area_erSRegions, RegionUnion10)</l>
<l>            smallest_rectangle1 (RegionUnion10, Row15, Column15, Row25, Column25)</l>
<l>            a_height:=Row25-Row15</l>
<l>            a_width:=Column25-Column15</l>
<l>            if (areaNumber1&gt;1 and a_height&gt;h_row*0.41)</l>
<l>                area_erNumber:=1</l>
<l>            elseif (areaNumber1&gt;1 and a_width&gt;cr_w*0.5)</l>
<l>                area_erNumber:=1</l>
<l>            else</l>
<l>                area_erNumber:=0</l>
<l>            endif</l>
<l>*             count_obj (area_erSRegions, area_erNumber)</l>
<c>            </c>
<c>            </c>
<l>            gen_rectangle1 (Rectangle_bkd, Row11, Column11, Row11+31, Column21)</l>
<c>            *判断焊锡包裹度</c>
<c>            *拟合上面的区域</c>
<l>*             dev_display (Image)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            intersection (Rectangle_bkd, RegionClosing, RegionIntersection2)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            closing_rectangle1 (RegionIntersection2, RegionClosing6, cr_w*0.5, 1)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            union2 (RegionClosing6, dw_SRegions, RegionUnion8)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            fill_up (RegionUnion8, RegionFillUp)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            difference (RegionFillUp, RegionUnion8, RegionIntersection4)</l>
<l>            union1 (RegionIntersection4, RegionUnion9)</l>
<l>            connection (RegionUnion9, ConnectedRegions9)</l>
<l>*             dev_display (Image_AffinTrans)</l>
<l>            select_shape (ConnectedRegions9, dh_Sregion, \
['area','width','height'], 'and', [2000,cr_w*0.1,h_row*0.56], [99999999,cr_w*0.5,h_row])</l>
<l>            count_obj (dh_Sregion, dh_ErNumber)</l>
<c>            </c>
<l>*             dh_ErNumber:=0</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            *翘起的数量       最大允许长度（超过设定最大比例也判定为NG）</c>
<l>            h_ERROR_Number:=0</l>
<c>            *穿孔附近链接的严重翘起</c>
<l>*             h_erNumberX:=0</l>
<c>            *计算90°∟直角特征</c>
<l>*             h_ERROR_Number2:=0</l>
<c>            </c>
<l>*             dev_display (ImageGauss1)</l>
<l>*     dev_display (Image_AffinTrans)</l>
<c>            *1：翘起的数量       最大允许长度（超过设定最大比例也判定为NG）</c>
<c>            *2：穿孔附近链接的严重翘起</c>
<c>            *3：计算90°∟直角特征</c>
<c>            *4：无包裹为NG</c>
<c>            *5：包裹不完整，却一边</c>
<c>            *6：判断焊锡包裹密度</c>
<c>            *7：判断焊锡包裹圆度</c>
<l>            if (h_erNumber&gt;1 or h_ERROR_Number&gt;0 or h_erNumberX&gt;0 or h_ERROR_Number2&gt;0 \
                or dw_erNumber&lt;1 or LR_erNumberX&gt;0 or area_erNumber&gt;0 or dh_ErNumber&gt;0)</l>
<c>                </c>
<c>                *1：翘起的数量       最大允许长度（超过设定最大比例也判定为NG）</c>
<l>                if (h_ERROR_Number&gt;0)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (h_ER_sRegions)</l>
<l>            union2 (out_EO_error_region, h_ER_sRegions, out_EO_error_region)</l>
<l>                elseif (h_erNumber&gt;1)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (EmptyObject_her)</l>
<l>            union2 (out_EO_error_region, EmptyObject_her, out_EO_error_region)</l>
<c>                *2：穿孔附近链接的严重翘起</c>
<l>                elseif (h_erNumberX&gt;0)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (EmptyObject_her2)</l>
<l>            union2 (out_EO_error_region, EmptyObject_herX, out_EO_error_region)</l>
<c>                *3：计算90°∟直角特征</c>
<l>                elseif (h_ERROR_Number2&gt;0)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (EmptyObject_her2)</l>
<l>            union2 (out_EO_error_region, h_ERROR_SRegions2, out_EO_error_region)</l>
<c>                *4：无包裹为NG</c>
<l>                elseif (dw_erNumber&lt;1)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (Rectangle1)</l>
<l>            union2 (out_EO_error_region, Rectangle1, out_EO_error_region)</l>
<c>                *5：包裹不完整，却一边</c>
<l>                elseif (LR_erNumberX&gt;0)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (Rectangle1)</l>
<l>            union2 (out_EO_error_region, LR_SRegionsX, out_EO_error_region)</l>
<c>                *6：判断焊锡包裹密度</c>
<l>                elseif (area_erNumber&gt;0)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (area_erSRegions)</l>
<l>            union2 (out_EO_error_region, area_erSRegions, out_EO_error_region)</l>
<c>                *7：判断焊锡包裹圆度</c>
<l>                else</l>
<l>                  *  if (dh_ErNumber&gt;1)</l>
<l>                    dev_set_color ('red')</l>
<l>                    dev_display (dh_Sregion)</l>
<l>            union2 (out_EO_error_region, dh_Sregion, out_EO_error_region)</l>
<c>                </c>
<l>                endif</l>
<l>                disp_message (WindowID, 'NG', 'image', \
                              row_2+(Q_row)-200, column_2+(Q_PY_temp_spacing), 'red', 'false')</l>
<c>                </c>
<l>        out_temp_error := out_temp_error+1</l>
<c>                </c>
<l>            else</l>
<l>                dev_set_color ('green')</l>
<l>                dev_display (Rectangle1)</l>
<l>                disp_message (WindowID, 'OK', 'image', \
                              row_2+(Q_row)-200, column_2+(Q_PY_temp_spacing), 'green', 'false')</l>
<l>            endif</l>
<c>            </c>
<l>*             stop ()</l>
<c>            </c>
<l>            Q_PY_temp_spacing:=Q_PY_temp_spacing+Q_HJ_spacing</l>
<c>            </c>
<c>            </c>
<l>        endfor</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="str_Welding_recognition">
<parameters>
<parameter id="Image"/>
<parameter id="Image_AffinTrans"/>
<parameter id="WindowID"/>
<parameter id="column_2"/>
<parameter id="out_EO_error_region"/>
<parameter id="out_temp_error"/>
<parameter id="row_2"/>
</parameters>
</docu>
</procedure>
<procedure name="Star_AffineTransImage">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss1_AffinTrans" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>try</l>
<l>    gauss_image (Image, ImageGauss1, 2.5)</l>
<l>    threshold (ImageGauss1, Region, 0, 40)</l>
<l>    connection (Region, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 300000, 999999999)</l>
<l>    fill_up (SelectedRegions, RegionFillUp)</l>
<l>    union1 (RegionFillUp, RegionUnion)</l>
<l>    smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>    gen_rectangle1 (Rectangle2,  0, 0, Row21-(Row21*0.5), Width)</l>
<l>    intersection (Rectangle2, RegionFillUp, RegionIntersection1)   </l>
<l>    erosion_rectangle1 (RegionIntersection1, RegionErosion1, 251, 151)</l>
<l>    dilation_rectangle1 (RegionErosion1, RegionDilation, 251, 151)  </l>
<c>   </c>
<l>    difference (RegionFillUp, Rectangle2, RegionDifference)</l>
<l>    erosion_rectangle1 (RegionDifference, RegionErosion2, 25, 25)</l>
<l>    dilation_rectangle1 (RegionErosion2, RegionDilation1, 25, 25)</l>
<c>    </c>
<l>    union2 (RegionDilation, RegionDilation1, RegionUnion1)</l>
<l>    union1 (RegionUnion1, RegionUnion2)    </l>
<l>    smallest_rectangle2 (RegionUnion2, Row3, Column3, Phi1, Length11, Length21)  </l>
<l>    if (Phi1&lt;-0.5 or Phi1&gt;0.5)</l>
<c>        * 从点和角度计算一个刚性的仿射变换</c>
<l>        vector_angle_to_rigid (Row3, Column3, Phi1, Row3, Column3, rad(180), HomMat2D)</l>
<l>    else</l>
<c>        * 从点和角度计算一个刚性的仿射变换</c>
<l>        vector_angle_to_rigid (Row3, Column3, Phi1, Row3, Column3, rad(0), HomMat2D)</l>
<l>    endif   </l>
<l>    affine_trans_image (ImageGauss1, ImageGauss1_AffinTrans, HomMat2D, 'constant', 'false')   </l>
<l>catch (Exception)</l>
<l>    copy_obj (ImageGauss1, ImageGauss1_AffinTrans, 1, 1)</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Star_AffineTransImage">
<parameters>
<parameter id="Height"/>
<parameter id="Image"/>
<parameter id="ImageGauss1_AffinTrans"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Positive_weld_before_check">
<interface>
<io>
<par name="Image_AffinTrans" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ResultObjectOK" base_type="iconic" dimension="0"/>
<par name="ResultObjectNG" base_type="iconic" dimension="0"/>
<par name="ObjectR" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="TemplateID" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>get_image_size (Image_AffinTrans, Width, Height)</l>
<l>zoom_image_factor (Image_AffinTrans, ImageZoomed1, 0.5, 0.5, 'constant')</l>
<l>pi := acos(0.0) * 2   </l>
<c>*匹配位置</c>
<l>best_match_rot_mg (ImageZoomed1, TemplateID, -pi, 2 * pi, 40, 'true', 4, Row, Column, Angle, Error)</l>
<l>scale_image_max (Image_AffinTrans,Image_AffinTrans1)</l>
<l>scale_image_range (Image_AffinTrans1, ImageScaled1, 100,150)</l>
<c></c>
<c></c>
<l>if (Error&lt;30)   </l>
<l>    dev_display (Image_AffinTrans)</l>
<l>    row_2:=Row*2</l>
<l>    column_2:=Column*2   </l>
<c>    *输出缺陷</c>
<l>    out_temp_error := 0</l>
<c>    *起始位置Y</c>
<l>    Q_row:=530</l>
<c>    *起始位置X</c>
<l>    Q_column:=-535</l>
<c>    *每个焊接位置的间距</c>
<l>    Q_HJ_spacing:=360</l>
<c>    *每次偏移位置累加</c>
<l>    Q_PY_temp_spacing:=Q_column+0</l>
<l>    dev_display (Image_AffinTrans)</l>
<l>    gen_empty_obj (ResultObjectOK)</l>
<l>    gen_empty_obj (ResultObjectNG)</l>
<l>    gen_empty_obj (ObjectR)</l>
<l>    for Index2 := 0 to 3 by 1</l>
<c>        *</c>
<l>        gen_rectangle2 (Rectangle1, row_2+(Q_row), \
                        column_2+(Q_PY_temp_spacing), 0, 85,90)</l>
<c>        *测试位置</c>
<l>        Q_PY_temp_spacing:=Q_PY_temp_spacing+Q_HJ_spacing       </l>
<l>*         stop ()</l>
<l>        reduce_domain (Image_AffinTrans, Rectangle1, ImageReduced1)</l>
<l>        smallest_rectangle1 (Rectangle1, Row1, Column1, Row2, Column2)</l>
<l>        h_row:=Row2-Row1</l>
<l>        cr_w:=Column2-Column1</l>
<l>        dev_display (Image_AffinTrans)</l>
<c>        **************************************</c>
<c>        * 查找汇流条边界提取汇流条</c>
<l>        mean_image (ImageReduced1, ImageMean, 1, 30)//30</l>
<l>        mean_image (ImageMean, ImageMean1, 13, 1)//13</l>
<l>*         stop ()</l>
<l>        dyn_threshold (ImageMean, ImageMean1, RegionDynThresh, 12, 'dark')</l>
<l>        connection (RegionDynThresh, ConnectedRegion)</l>
<l>        smallest_rectangle1 (ConnectedRegion, Row12, Column12, Row22, Column22)</l>
<l>        WHeight:=Row22-Row12</l>
<l>        gen_empty_obj (ObjectH)</l>
<l>        for i := 0 to 1 by 1</l>
<l>            try</l>
<l>                tuple_max (WHeight, WHeight_Lmax) </l>
<l>                if(WHeight_Lmax&lt;h_row/5)</l>
<l>                    WHeight_Lmax:=h_row/5</l>
<l>                endif</l>
<l>                select_shape (ConnectedRegion, RegionSelecteds,'height','and',WHeight_Lmax, 9999)</l>
<c>                * 获取最大值的位置</c>
<l>                tuple_find (WHeight, WHeight_Lmax, j)</l>
<c>                * 删除索引位置的值</c>
<l>                tuple_remove (WHeight, j,WHeight) </l>
<l>                union2 (ObjectH,RegionSelecteds,ObjectH)</l>
<l>                tuple_length( j, Length)</l>
<l>                if (Length&gt;=2)</l>
<l>                    i:=2</l>
<l>                endif</l>
<l>            catch (Exception)</l>
<l>            endtry</l>
<l>        endfor</l>
<l>        shape_trans (ObjectH, RegionTran, 'convex')</l>
<l>        smallest_rectangle1 (RegionTran, Row13, Column13, Row23, Column23)</l>
<l>        WWidth:=Column23-Column13</l>
<l>        HHeight:=Row23-Row13</l>
<l>        if (WWidth&gt;30 and WWidth&lt;125)//35//30</l>
<l>            copy_obj (RegionTran,RegionTrans, 1, 1)</l>
<l>        else</l>
<l>            gen_empty_obj (RegionTrans)</l>
<l>        endif</l>
<l>        count_obj (RegionTrans, Number)</l>
<c>        *************************************</c>
<l>        gen_empty_obj (WhiteObject)</l>
<l>        if (Number&gt;=1)</l>
<l>            for i := 1 to Number by 1</l>
<l>                select_obj (RegionTrans, ObjectSelected, i)</l>
<l>                min_max_gray (ObjectSelected, Image_AffinTrans, 0, Min, Max, Range)</l>
<l>                if (Max&gt;=44)//Max&gt;=230/160/55/45</l>
<l>                    concat_obj (WhiteObject, ObjectSelected, ObjectRegions)</l>
<l>                endif</l>
<l>            endfor</l>
<l>        else</l>
<l>*             stop ()</l>
<c>            * 提取白色汇流条</c>
<l>            dev_display (ImageReduced1)</l>
<l>*             scale_image_range (ImageReduced1, ImageScaledW, 100,200)</l>
<l>            median_image (ImageReduced1, ImageMedian, 'circle',4, 'mirrored')</l>
<c>            </c>
<c>           </c>
<l>            binary_threshold (ImageMedian, Region1, 'max_separability', 'light', UsedThreshold)</l>
<l>            threshold (ImageMedian, Region3, UsedThreshold+20, 255)</l>
<l>            connection (Region3, ConnectedRegions1)</l>
<l>            select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', 1290, 999999)</l>
<l>            select_gray (SelectedRegions1, ImageMedian, SelectedRegions1, 'mean', 'and', 200, 255)</l>
<l>            concat_obj (WhiteObject,SelectedRegions1, ObjectRegions)  </l>
<l>            count_obj (ObjectRegions, Number1)</l>
<l>            if(Number1=0)</l>
<c>                * 提取黑色汇流条</c>
<l>                scale_image_range (ImageReduced1, ImageScaledW, 100,150)</l>
<l>                emphasize (ImageReduced1, ImageEmphasize, Width, Height, 1)</l>
<l>                binary_threshold (ImageEmphasize, Region4, 'max_separability', 'dark', UsedThreshold1)</l>
<l>                threshold (ImageEmphasize, Region5, 0, abs(UsedThreshold-40))</l>
<l>                connection (Region5, ConnectedRegions2)</l>
<l>                select_shape (ConnectedRegions2, SelectedRegions2, 'area', 'and', 1000, 999999)</l>
<l>                select_shape (SelectedRegions2, SelectedRegions2, 'width', 'and', 10, (3*cr_w)/4)</l>
<l>                select_gray (SelectedRegions2, ImageReduced1, SelectedRegions2, 'mean', 'and', 0, 60)</l>
<l>                concat_obj (WhiteObject,SelectedRegions2, ObjectRegions)</l>
<l>*                 stop ()  </l>
<l>            endif</l>
<c>            </c>
<c>            </c>
<l>        endif</l>
<c>        * 汇流条长短结果判定</c>
<l>        dev_display (Image_AffinTrans)</l>
<l>        dev_display (Rectangle1)</l>
<l>*         stop ()</l>
<c>        * 假如只能提取到提取单边高度</c>
<l>        HHeight:=Row23-Row13</l>
<l>        h_row:=Row2-Row1</l>
<l>        count_obj (RegionTran, Number2)</l>
<l>        if (HHeight&gt;0.8*h_row and Number2=1 )</l>
<l>            concat_obj (ObjectRegions, RegionTran, ObjectRegions)</l>
<l>*             stop ()</l>
<l>        endif</l>
<c>        </c>
<l>        smallest_rectangle1 (ObjectRegions, Row31, Column31, Row41, Column41)</l>
<c>        * 汇流条超出底边高度</c>
<l>        HeightOver:=Row2-Row31</l>
<c>        * 判断汇流条过长</c>
<l>        HeightLess:=Row31-Row1</l>
<c>        </c>
<l>        if (HeightOver&gt;35 and HeightLess&gt; 20)</l>
<l>            concat_obj (ResultObjectOK, Rectangle1, ResultObjectOK)</l>
<l>        else</l>
<l>            concat_obj (ResultObjectNG, Rectangle1, ResultObjectNG)</l>
<l>        endif</l>
<l>        concat_obj (ObjectR, ObjectRegions, ObjectR)</l>
<c>        </c>
<l>    endfor</l>
<l>endif  </l>
<l>return ()</l>
</body>
<docu id="Positive_weld_before_check">
<parameters>
<parameter id="Image_AffinTrans"/>
<parameter id="ObjectR"/>
<parameter id="ResultObjectNG"/>
<parameter id="ResultObjectOK"/>
<parameter id="TemplateID"/>
</parameters>
</docu>
</procedure>
<procedure name="Weld_result_show">
<interface>
<io>
<par name="Image_AffinTrans" base_type="iconic" dimension="0"/>
<par name="ResultObjectOK" base_type="iconic" dimension="0"/>
<par name="ResultObjectNG" base_type="iconic" dimension="0"/>
<par name="ObjectR" base_type="iconic" dimension="0"/>
</io>
</interface>
<body>
<c>* 结果显示</c>
<l>dev_clear_window ()</l>
<l>dev_set_line_width (2)</l>
<l>dev_display (Image_AffinTrans)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (ObjectR)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (ResultObjectOK)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (ResultObjectNG)</l>
<c></c>
<l>count_obj (ResultObjectOK, NumOK)</l>
<l>count_obj (ResultObjectNG, NumNG)</l>
<l>for j := 1 to NumOK by 1</l>
<l>    dev_set_color ('green')</l>
<l>    select_obj (ResultObjectOK, SelectedObjectOK,j)</l>
<l>    smallest_circle (SelectedObjectOK, RowOK, ColumnOK,Radius)</l>
<l>    set_tposition (3600, RowOK+200, ColumnOK-50)</l>
<l>    write_string (3600, 'OK')            </l>
<l>endfor</l>
<c></c>
<l>for k := 1 to NumNG by 1</l>
<l>    dev_set_color ('red')</l>
<l>    select_obj (ResultObjectNG, SelectedObjectNG, k)</l>
<l>    smallest_circle (SelectedObjectNG, RowNG, ColumnNG, Radius)</l>
<l>    set_tposition (3600,RowNG+200,ColumnNG-50)</l>
<l>    write_string (3600, 'NG')         </l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Weld_result_show">
<parameters>
<parameter id="Image_AffinTrans"/>
<parameter id="ObjectR"/>
<parameter id="ResultObjectNG"/>
<parameter id="ResultObjectOK"/>
</parameters>
</docu>
</procedure>
<procedure name="Extract_Center_Area">
<interface>
<io>
<par name="Image_AffinTrans" base_type="iconic" dimension="0"/>
</io>
</interface>
<body>
<l>scale_image (Image_AffinTrans, ImageScaled,4, 0)</l>
<l>scale_image_range (ImageScaled, ImageScaled, 100,150)</l>
<c></c>
<l>binary_threshold (ImageScaled, Region, 'max_separability', 'dark',Threshold)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<l>smallest_rectangle1 (SelectedRegions, Row1, Column1, Row2, Column2)</l>
<l>gen_rectangle1 (Rectangle, Row2-650, Column1, Row2, Column2)</l>
<c></c>
<l>reduce_domain (ImageScaled, Rectangle, ImageReduced)</l>
<l>binary_threshold (ImageReduced, WeldRegion, 'max_separability', 'light',Threshold)</l>
<l>fill_up (WeldRegion, RegionFillUp)</l>
<l>connection (RegionFillUp, RegionsConnected)</l>
<l>select_shape (RegionsConnected, RegionsSelected, 'area', 'and', 300000, 9999999)</l>
<l>opening_circle (RegionsSelected, RegionOpening, 10)</l>
<l>erosion_circle (RegionOpening, RegionErosion, 3.5)</l>
<l>stop ()</l>
<l>return ()</l>
</body>
<docu id="Extract_Center_Area">
<parameters>
<parameter id="Image_AffinTrans"/>
</parameters>
</docu>
</procedure>
</hdevelop>
